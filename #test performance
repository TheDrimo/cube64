#test performance

import timeit



def incrementer_liste(liste):
    i = len(liste) - 1
    while i >= 0:
        if liste[i] < 3:
            liste[i] += 1
            break
        else:
            liste[i] = 0
            i -= 1
    return liste


def incrementer_liste_base4_v1(liste):
    num = sum(v * (4**i) for i, v in enumerate(reversed(liste)))
    num += 1
    nouvelle_liste = []
    while num > 0:
        nouvelle_liste.append(num % 4)
        num //= 4
    nouvelle_liste.reverse()
    while len(nouvelle_liste) < len(liste):
        nouvelle_liste.insert(0, 0)
    return nouvelle_liste


def incrementer_liste_base4_v2(liste):
    chaine_base4 = ''.join(str(x) for x in liste)
    nombre = int(chaine_base4, 4)
    nombre += 1
    chaine_base4_incremente = ''
    while nombre > 0:
        chaine_base4_incremente = str(nombre % 4) + chaine_base4_incremente
        nombre //= 4
    liste_incremente = [int(chiffre) for chiffre in chaine_base4_incremente]
    while len(liste_incremente) < len(liste):
        liste_incremente.insert(0, 0)
    return liste_incremente


n = 10000
liste_test = [0] * 20 + [3]*10 + [2]*10 + [3]


temps_v1 = timeit.timeit('incrementer_liste(liste_test[:])', globals=globals(), number=n)
temps_v2 = timeit.timeit('incrementer_liste_base4_v1(liste_test[:])', globals=globals(), number=n)
temps_v3 = timeit.timeit('incrementer_liste_base4_v2(liste_test[:])', globals=globals(), number=n)

print(temps_v1, temps_v2, temps_v3)